tarefas = []            # Lista principal de tarefas
historico = []          # Pilha para desfazer tarefas
fila_execucao = []      # Fila para executar tarefas

def adicionar_tarefa(tarefa): #Fun√ß√£o para adicionar uma tarefa 
    tarefas.append(tarefa) #Adiciona a tarefa √† lista principal de tarefas
    historico.append(tarefa) #Adiciona a tarefa √† lista historico, para que possa ser desfeita posteriormente
    fila_execucao.append(tarefa) #Inclui a tarefa na lista fila_execucao, que funciona como uma fila (FIFO)
    print(f"Tarefa '{tarefa}' adicionada!\n") #Exibe uma mensagem informando que a tarefa foi adicionada com sucesso

def desfazer_ultima_tarefa(): # Cria uma fun√ß√£o chamada desfazer_ultima_tarefa que n√£o recebe par√¢metros
    if historico: # Verifica se a lista historico n√£o est√° vazia
        ultima = historico.pop() #Remove e retorna a √∫ltima tarefa da lista historico usando o m√©todo pop()
        tarefas.remove(ultima) #Remove a tarefa da lista tarefas.
        fila_execucao.remove(ultima) #Remove a tarefa da lista fila_execucao
        print(f"Tarefa '{ultima}' desfeita!\n") #Exibe uma mensagem indicando que a √∫ltima tarefa foi desfeita
    else: #Se  o hist√≥rico estiver vazio, executa o bloco abaixo
        print("Nenhuma tarefa para desfazer.\n") #Informa que n√£o h√° tarefas para desfazer

def atender_tarefa(): #Cria uma fun√ß√£o chamada atender_tarefa
    if fila_execucao: # Verifica se a lista fila_execucao n√£o est√° vazia.
        feita = fila_execucao.pop(0) # Remove e retorna o primeiro item da lista (FIFO - Primeiro a Entrar, Primeiro a Sair)
        tarefas.remove(feita) #Remove a tarefa da lista principal tarefas
        print(f"Tarefa '{feita}' atendida!\n") #Exibe uma mensagem indicando que a tarefa foi atendida
    else: #Se a fila estiver vazia, executa o bloco abaixo
        print("Nenhuma tarefa para atender.\n") # Informa que n√£o h√° tarefas para atender

def mostrar_tarefas(): #Cria uma fun√ß√£o chamada mostrar_tarefas
    print("\nüìã Lista de Tarefas:") # Imprime um t√≠tulo para a lista de tarefas
    for i, t in enumerate(tarefas): # Itera sobre a lista tarefas, obtendo o √≠ndice e o valor
        print(f"{i + 1}. {t}") #Exibe cada tarefa com numera√ß√£o a partir de 1
    print() #Insere um espa√ßo em branco para melhorar a formata√ß√£o

while True: #Mant√©m o programa em execu√ß√£o at√© o usu√°rio escolher sair

    # Mostra as op√ß√µes dispon√≠veis para o usu√°rio:

    print("1. Adicionar Tarefa")
    print("2. Desfazer √öltima Tarefa")
    print("3. Atender Tarefa (modo fila)")
    print("4. Mostrar Tarefas")
    print("5. Sair")

    opcao = input("Escolha uma op√ß√£o: ") # Aguarda a entrada do usu√°rio

    if opcao == '1': # Verifica se a op√ß√£o √© "1"

        # Recebe a descri√ß√£o e as datas de in√≠cio e fim

        tarefa = input("Digite a tarefa: ") 
        data_de_inicio = input("Digite a data de inicio (mm/dd/aa): ")
        data_final = input("Digite a data final (mm/dd/aa): ")
        adicionar_tarefa(f'{tarefa}, Inicio: ({data_de_inicio}) - Fim: ({data_final})')

        # Recebe a descri√ß√£o e as datas de in√≠cio e fim

    elif opcao == '2':
        desfazer_ultima_tarefa()
    elif opcao == '3':
        atender_tarefa()
    elif opcao == '4':
        mostrar_tarefas()
    elif opcao == '5':
        print("Saindo do programa...")
        break
    else:
        print("Op√ß√£o inv√°lida!\n")

file_name= "lista_tarefa.txt" # Define o nome do arquivo para salvar as tarefas

        # Se a lista tarefas n√£o estiver vazia, grava cada tarefa em uma linha
if tarefas: 
    with open(file_name, "w") as file:
        for item in tarefas:
            file.write(item + "\n")

    print(f'salvo em {file_name}!') 

